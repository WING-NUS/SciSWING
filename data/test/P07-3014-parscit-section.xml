<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant no="0" confidence="0.029805">
<title confidence="0.9992665">
Semantic Classification of Noun Phrases Using
Web Counts and Learning Algorithms
</title>
<author confidence="0.997887">
Paul Nulty
</author>
<affiliation confidence="0.9986085">
School of Computer Science and Informatics
University College Dublin
</affiliation>
<address confidence="0.542525">
Belfield, Dublin 4, Ireland
</address>
<email confidence="0.997013">
paul.nulty@ucd.ie
</email>
<sectionHeader confidence="0.999804" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.999709">
This paper investigates the use of machine
learning algorithms to label modifier-noun
compounds with a semantic relation. The
attributes used as input to the learning algo-
rithms are the web frequencies for phrases
containing the modifier, noun, and a prepo-
sitional joining term. We compare and
evaluate different algorithms and different
joining phrases on Nastase and Szpako-
wicz&apos;s (2003) dataset of 600 modifier-noun
compounds. We find that by using a Sup-
port Vector Machine classifier we can ob-
tain better performance on this dataset than
a current state-of-the-art system; even with
a relatively small set of prepositional join-
ing terms.
</bodyText>
<sectionHeader confidence="0.99548" genericHeader="keywords">
1 Introduction
</sectionHeader>
<bodyText confidence="0.999832760869565">
Noun-modifier word pairs occur frequently in
many languages, and the problem of semantic dis-
ambiguation of these phrases has many potential
applications in areas such as question-answering
and machine translation. One very common ap-
proach to this problem is to define a set of seman-
tic relations which capture the interaction between
the modifier and the head noun, and then attempt
to assign one of these semantic relations to each
noun-modifier pair. For example, the phrase &amp;quot;flu
virus&amp;quot; could be assigned the semantic relation
&amp;quot;causal&amp;quot; (the virus causes the flu); the relation for
&amp;quot;desert storm&amp;quot; could be &amp;quot;location&amp;quot; (the storm is
located in the desert).
There is no consensus as to which set of seman-
tic relations best captures the differences in mean-
ing of various noun phrases. Work in theoretical
linguistics has suggested that noun-noun com-
pounds may be formed by the deletion of a predi-
cate verb or preposition (Levi 1978). However,
whether the set of possible predicates numbers 5 or
50, there are likely to be some examples of noun
phrases that fit into none of the categories and
some that fit in multiple categories.
Modifier-noun phrases are often used inter-
changeably with paraphrases which contain the
modifier and the noun joined by a preposition or
simple verb. For example, the query &amp;quot;morning ex-
ercise&amp;quot; returns 133,000 results from the Yahoo
search engine, and a query for the phrase &amp;quot;exercise
in the morning&amp;quot; returns 47,500 results. Sometimes
people choose to use a modifier-noun compound
phrase to describe a concept, and sometimes they
choose to use a paraphrase which includes a prepo-
sition or simple verb joining head noun and the
modifier. One method for deducing semantic rela-
tions between words in compounds involves gath-
ering n-gram frequencies of these paraphrases,
containing a noun, a modifier and a &amp;quot;joining term&amp;quot;
that links them. Some algorithm can then be used
to map from joining term frequencies to semantic
relations and so find the correct relation for the
compound in question. This is the approach we use
in our experiments. We choose two sets of joining
terms, based on the frequency with which they oc-
cur in between nouns in the British National Cor-
</bodyText>
<page confidence="0.952616">
79
</page>
<note confidence="0.895555833333333">
Proceedings of the ACL 2007 Student Research Workshop, pages 79–84,
Prague, June 2007. c�2007 Association for Computational Linguistics
pus (BNC). We experiment with three different
learning algorithms; Nearest Neighbor, Multi-
Layer Perceptron and Support Vector Machines
(SVM).
</note>
<sectionHeader confidence="0.985689" genericHeader="introduction">
2 Motivation
</sectionHeader>
<bodyText confidence="0.9960236">
The motivation for this paper is to discover which
joining terms are good predictors of a semantic
relation, and which learning algorithms perform
best at the task of mapping from joining terms to
semantic relations for modifier-noun compounds.
</bodyText>
<subsectionHeader confidence="0.998065">
2.1 Joining Terms
</subsectionHeader>
<bodyText confidence="0.999673956521739">
Choosing a set of joining terms in a principled
manner in the hope of capturing the semantic rela-
tion between constituents in the noun phrase is dif-
ficult, but there is certainly some correlation be-
tween a prepositional term or short linking verb
and a semantic relation. For example, the preposi-
tion &amp;quot;during&amp;quot; indicates a temporal relation, while
the preposition &amp;quot;in&amp;quot; indicates a locative relation,
either temporal or spatial.
In this paper, we are interested in whether the
frequency with which a joining term occurs be-
tween two nouns is related to how it indicates a
semantic interaction. This is in part motivated by
Zipf&apos;s theory which states that the more frequently
a word occurs in a corpus the more meanings or
senses it is likely to have (Zipf 1929). If this is
true, we would expect that very frequent preposi-
tions, such as &amp;quot;of&amp;quot;, would have many possible
meanings and therefore not reliably predict a se-
mantic relation. However, less frequent preposi-
tions, such as &amp;quot;while&amp;quot; would have a more limited
set of senses and therefore accurately predict a se-
mantic relation.
</bodyText>
<subsectionHeader confidence="0.998935">
2.2 Machine Learning Algorithms
</subsectionHeader>
<bodyText confidence="0.99964175">
We are also interested in comparing the perform-
ance of machine learning algorithms on the task of
mapping from n-gram frequencies of joining terms
to semantic relations. For the experiments we use
Weka, (Witten and Frank, 1999) a machine learn-
ing toolkit which allows for fast experimentation
with many standard learning algorithms. In Section
5 we present the results obtained using the nearest-
neighbor, neural network (i.e. multi-layer percep-
tron) and SVM. The mechanisms of these different
learning approaches will be discussed briefly in
Section 4.
</bodyText>
<sectionHeader confidence="0.999849" genericHeader="related work">
3 Related Work
</sectionHeader>
<subsectionHeader confidence="0.999158">
3.1 Web Mining
</subsectionHeader>
<bodyText confidence="0.995601769230769">
Much of the recent work conducted on the problem
of assigning semantic relations to noun phrases has
used the web as a corpus. The use of hit counts
from web search engines to obtain lexical
information was introduced by Turney (2001). The
idea of searching a large corpus for specific lexico-
syntactic phrases to indicate a semantic relation of
interest was first described by Hearst (1992).
A lexical pattern specific enough to indicate a
particular semantic relation is usually not very
frequent, and using the web as a corpus alleviates
the data sparseness problem. However, it also
introduces some problems.
</bodyText>
<listItem confidence="0.931939333333333">
• The query language permitted by the large
search engines is somewhat limited.
• Two of the major search engines (Google and
Yahoo) do not provide exact frequencies, but
give rounded estimates instead.
• The number of results returned is unstable as
</listItem>
<bodyText confidence="0.981965086956522">
new pages are created and deleted all the time.
Nakov and Hearst (2005) examined the use of
web-based n-gram frequencies for an NLP task and
concluded that these issues do not greatly impact
the interpretation of the results. Keller and Lapata
(2003) showed that web frequencies correlate
reliably with standard corpus frequencies.
Lauer (1995) tackles the problem of semantically
disambiguating noun phrases by trying to find the
preposition which best describes the relation
between the modifier and head noun. His method
involves searching a corpus for occurrences
paraphrases of the form &amp;quot;noun preposition
modifier&amp;quot;. Whichever preposition is most frequent
in this context is chosen. Lapata and Keller (2005)
improved on Lauer&apos;s results at the same task by
using the web as a corpus. Nakov and Hearst
(2006) use queries of the form &amp;quot;noun that *
modifier&amp;quot; where &apos;*&apos; is a wildcard operator. By
retrieving the words that most commonly occurred
in the place of the wildcard they were able to
identify very specific predicates that are likely to
represent the relation between noun and modifier.
</bodyText>
<page confidence="0.927664">
80
</page>
<subsectionHeader confidence="0.997009">
3.2 Machine Learning Approaches
</subsectionHeader>
<bodyText confidence="0.999300057142857">
There have been two main approaches used when
applying machine learning algorithms to the se-
mantic disambiguation of modifier-noun phrases.
The first approach is to use semantic properties of
the noun and modifier words as attributes, using a
lexical hierarchy to extract these properties. This
approach was used by Rosario and Hearst (2001)
within a specific domain — medical texts. Using an
ontology of medical terms they train a neural net-
work to semantically classify nominal phrases,
achieving 60% accuracy over 16 classes.
Nastase and Szpakowicz (2003) use the position
of the noun and modifier words within general se-
mantic hierarchies (Roget&apos;s Thesaurus and Word-
Net) as attributes for their learning algorithms.
They experiment with various algorithms and con-
clude that a rule induction system is capable of
generalizing to characterize the noun phrases.
Moldovan et al (2004) also use WordNet. They
experiment with a Bayesian algorithm, decision
trees, and their own algorithm; semantic scattering.
There are some drawbacks to the technique of us-
ing semantic properties extracted from a lexical
hierarchy. Firstly, it has been noted that the distinc-
tions between word senses in WordNet are very
fine-grained, making the task of word-sense dis-
ambiguation tricky. Secondly, it is usual to use a
rule-based learning algorithm when the attributes
are properties of the words rather than n-gram fre-
quency counts. As Nastase and Szpakowicz (2003)
point out, a large amount of labeled data is re-
quired to allow these rule-based learners to effec-
tively generalize, and manually labeling thousands
of modifier-noun compounds would be a time-
consuming task.
</bodyText>
<table confidence="0.708918">
causal flu virus, onion tear
temporal summer travel, morning class
spatial west coast, home remedy
participant mail sorter, blood donor
quality rice paper, picture book
</table>
<tableCaption confidence="0.98144">
Table 1: Examples for each of the five relations
</tableCaption>
<bodyText confidence="0.9968389375">
The second approach is to use statistical informa-
tion about the occurrence of the noun and modifier
in a corpus to generate attributes for a machine
learning algorithm. This is the method we will de-
scribe in this paper. Turney and Littman (2005)
use a set of 64 short prepositional and conjunctive
phrases they call &amp;quot;joining terms&amp;quot; to generate exact
queries for AltaVista of the form &amp;quot;noun joining
term modifier&amp;quot;, and &amp;quot;modifier joining term noun&amp;quot;.
These hit counts were used with a nearest
neighbor algorithm to assign the noun phrases se-
mantic relations. Over the set of 5 semantic rela-
tions defined by Nastase and Szpakowicz (2003),
they achieve an accuracy of 45.7% for the task of
assigning one of 5 semantic relations to each of the
600 modifier-noun phrases.
</bodyText>
<sectionHeader confidence="0.994293" genericHeader="method">
4 Method
</sectionHeader>
<bodyText confidence="0.9998839375">
The method described in this paper is similar to
the work presented in Turney and Littman (2005).
We collect web frequencies for queries of the form
&amp;quot;head joining term modifier&amp;quot;. We did not collect
queries of the form &amp;quot;modifier joining term head&amp;quot;;
in the majority of paraphrases of noun phrases the
head noun occurs before the modifying word. As
well as trying to achieve reasonable accuracy, we
were interested in discovering what kinds of join-
ing phrases are most useful when trying to predict
the semantic relation, and which machine learning
algorithms perform best at the task of using vectors
of web-based n-gram frequencies to predict the
semantic relation.
For our experiments we used the set of 600 la-
beled noun-modifier pairs of Nastase and Szpako-
wicz (2003). This data was also used by Turney
and Littman (2005). Of the 600 modifier-noun
phrases, three contained hyphenated or two-word
modifier terms, for example &amp;quot;test-tube baby&amp;quot;. We
omitted these three examples from our experi-
ments, leaving a dataset of 597 examples.
The data is labeled with two different sets of
semantic relations: one set of 30 relations with
fairly specific meanings, and another set of 5 rela-
tions with more abstract meanings. For our ex-
periments we focused on the set of 5 relations. One
reason for this is that dividing a set of 600 in-
stances into 30 classes results in a fairly sparse and
uneven dataset. Table 1 is a list of the relations
used and examples of compounds that are labeled
with each relation.
</bodyText>
<subsectionHeader confidence="0.995826">
4.1 Collecting Web Frequencies
</subsectionHeader>
<bodyText confidence="0.914872">
In order to collect the n-gram frequencies, we used
the Yahoo Search API. Collecting frequencies for
</bodyText>
<page confidence="0.989224">
81
</page>
<bodyText confidence="0.955606321428571">
600 noun-modifier pairs, using 28 different joining
terms required 16,800 calls to the search engine.
We will discuss our choice of the joining terms in
the next section.
When collecting web frequencies we took advan-
tage of the OR operator provided by the search
engine. For each joining term, we wanted to sum
the number of hits for the term on its own, the term
followed by &apos;a&apos; and the term followed by &apos;the&apos;. In-
stead of conducting separate queries for each of
these forms, we were able to sum the results with
just one search. For example, if the noun phrase
was &amp;quot;student invention&amp;quot; and the joining phrase was
&amp;quot;by&amp;quot;; one of the queries would be:
&amp;quot;invention by student&amp;quot; OR &amp;quot;invention by a student&amp;quot; OR
&amp;quot;invention by the student&amp;quot;
This returns the sum of the number of pages
matched by each of these three exact queries. The
idea is that these sensible paraphrases will return
more hits than nonsense ones, such as:
&amp;quot;invention has student&amp;quot; OR &amp;quot;invention has a student&amp;quot;
OR &amp;quot;invention has the student&amp;quot;
It would be possible to construct a set of hand-
coded rules to map from joining terms to semantic
relations; for example &amp;quot;during&amp;quot; maps to temporal,
&amp;quot;by&amp;quot; maps to causal and so on. However, we hope
that the classifiers will be able to identify combina-
tions of prepositions that indicate a relation.
</bodyText>
<subsectionHeader confidence="0.998269">
4.2 Choosing a Set of Joining Terms
</subsectionHeader>
<bodyText confidence="0.9999829">
Possibly the most difficult problem with this
method is deciding on a set of joining terms which
is likely to provide enough information about the
noun-modifier pairs to allow a learning algorithm
to predict the semantic relation. Turney and Litt-
man (2005) use a large and varied set of joining
terms. They include the most common preposi-
tions, conjunctions and simple verbs like &amp;quot;has&amp;quot;,
&amp;quot;goes &amp;quot; and &amp;quot;is&amp;quot;. Also, they include the wildcard
operator &apos;*&apos; in many of their queries; for example
&amp;quot;not&amp;quot;, &amp;quot;* not&amp;quot; and &amp;quot;but not&amp;quot; are all separate que-
ries. In addition, they include prepositions both
with and without the definite article as separate
queries, for example &amp;quot;for&amp;quot; and &amp;quot;for the&amp;quot;.
The joining terms used for the experiments in this
paper were chosen by examining which phrases
most commonly occurred between two nouns in
the BNC. We counted the frequencies with which
phrases occurred between two nouns and chose the
28 most frequent of these phrases as our joining
terms. We excluded conjunctions and determiners
from the list of the most frequent joining terms.
We excluded conjunctions on the basis that in most
contexts a conjunction merely links the two nouns
together for syntactic purposes; there is no real
sense in which one of the nouns modifies another
semantically in this context. We excluded deter-
miners on the basis that the presence of a deter-
miner does not affect the semantic properties of the
interaction between the head and modifier.
</bodyText>
<subsectionHeader confidence="0.997503">
4.3 Learning Algorithms
</subsectionHeader>
<bodyText confidence="0.999441">
There were three conditions experimented with
using three different algorithms. For the first con-
dition, the attributes used by the learning algo-
rithms consisted of vectors of web hits obtained
using the 14 most frequent joining terms found in
the BNC. The next condition used a vector of web
hits obtained using the joining terms that occurred
</bodyText>
<table confidence="0.988350733333333">
1-14 15-28
of against
in within
to during
for through
on over
with towards
at without
is across
from because
as behind
by after
between before
about while
has under
</table>
<tableCaption confidence="0.989688">
Table 2: joining terms ordered by the frequency
</tableCaption>
<bodyText confidence="0.9571608">
with which they occurred between two nouns in
the BNC.
from position 14 to 28 in the list of the most fre-
quent terms found in the BNC. The third condition
used all 28 joining terms. The joining terms are
listed in Table 2. We used the log of the web
counts returned, as recommended in previous work
(Keller and Lapata, 2003).
The first learning algorithm we experimented
with was the nearest neighbor algorithm `IB1&apos;, as
</bodyText>
<page confidence="0.985315">
82
</page>
<bodyText confidence="0.995844923076923">
implemented in Weka. This algorithm considers
the vector of n-gram frequencies as a multi-
dimensional space, and chooses the label of the
nearest example in this space as the label for each
new example. Testing for this algorithm was done
using leave-one-out cross validation.
The next learning algorithm we used was the
multi-layer perceptron, or neural network. The
network was trained using the backpropagation of
error technique implemented in Weka. For the first
two sets of data we used a network with 14 input
nodes, one hidden layer with 28 nodes, and 5 out-
put nodes. For the final condition, which uses the
frequencies for all 28 joining terms, we used 28
input nodes, one hidden layer with 56 nodes, and
again 5 outputs, one for each class. We used 20-
fold cross validation with this algorithm.
The final algorithm we tested was an SVM
trained with the Sequential Minimal Optimization
method provided by Weka. A support vector ma-
chine is a method for creating a classification func-
tion which works by trying to find a hypersurface
in the space of possible inputs that splits the posi-
tive examples from the negative examples for each
class. For this test we again used 20-fold cross
validation.
</bodyText>
<sectionHeader confidence="0.999846" genericHeader="evaluation">
5. Results
</sectionHeader>
<bodyText confidence="0.99988192">
The accuracy of the algorithms on each of the con-
ditions is illustrated below in Table 3. Since the
largest class in the dataset accounts for 43% of the
examples, the baseline accuracy for the task
(guessing &amp;quot;participant&amp;quot; all the time) is 43%.
The condition containing the counts for the less
frequent joining terms performed slightly better
than that containing the more frequent ones, but
the best accuracy resulted from using all 28 fre-
quencies. The Multi-Layer Perceptron performed
better than the nearest neighbor algorithm on all
three conditions. There was almost no difference in
accuracy between the first two conditions, and
again using all of the joining terms produced the
best results.
The SVM algorithm produced the best accuracy
of all, achieving 50.1% accuracy using the com-
bined set of joining terms. The less frequent join-
ing terms achieve slightly better accuracy using the
Nearest Neighbor and SVM algorithms, and very
slightly worse accuracy using the neural network.
Using all of the joining terms resulted in a signifi-
cant improvement in accuracy for all algorithms.
The SVM consistently outperformed the baseline;
neither of the other algorithms did so.
</bodyText>
<sectionHeader confidence="0.997296" genericHeader="conclusions">
6. Discussion and Future Work
</sectionHeader>
<bodyText confidence="0.999196">
Our motivation in this paper was twofold. Firstly,
we wanted to compare the performance of different
machine learning algorithms on the task of map-
ping from a vector of web frequencies of para-
phrases containing joining terms to semantic rela-
tions. Secondly, we wanted to discover whether the
frequency of joining terms was related to their ef-
fectiveness at predicting a semantic relation.
</bodyText>
<subsectionHeader confidence="0.993454">
6.1 Learning Algorithms
</subsectionHeader>
<bodyText confidence="0.999058210526316">
The results suggest that the nearest neighbor ap-
proach is not the most effective algorithm for the
classification task. Turney and Littman (2005)
achieve an accuracy of 45.7%, where we achieve a
maximum accuracy of 38.1% on this dataset using
a nearest neighbor algorithm. However, their tech-
nique uses the cosine of the angle between the vec-
tors of web counts as the similarity metric, while
the nearest neighbor implementation in Weka uses
the Euclidean distance.
Also, they use 64 joining terms and gather
counts for both the forms &amp;quot;noun joining term modi-
fier&amp;quot; and &amp;quot;modifier joining term noun&amp;quot; (128 fre-
quencies in total); while we use only the former
construction with 28 joining terms. By using the
SVM classifier, we were able to achieve a higher
accuracy than Turney and Littman (50.1% versus
45.7%) with significantly fewer joining terms (28
versus 128). However, one issue with the SVM is
</bodyText>
<table confidence="0.998085">
Joining Terms 1-14 Joining terms 15-28 All 28 Joining terms
Nearest Neighbor 32.6 34.7 38.1
Multi Layer Perceptron 37.6 37.4 42.2
Support Vector Machine 44.2 45.9 50.1
</table>
<tableCaption confidence="0.98808">
Table 3: Accuracy for each algorithm using each set of joining terms on the Nastase and Szpako-
wicz test set of modifier-noun compounds.
</tableCaption>
<page confidence="0.996057">
83
</page>
<bodyText confidence="0.999796444444444">
that it never predicted the class &amp;quot;causal&amp;quot; for any of
the examples. The largest class in our dataset is
&amp;quot;participant&amp;quot;, which is the label for 43% of the
examples; the smallest is &amp;quot;temporal&amp;quot;, which labels
9% of the examples. &amp;quot;Causal&amp;quot; labels 14% of the
data. It is difficult to explain why the algorithm
fails to account for the &amp;quot;causal&amp;quot; class; a useful task
for future work would be to conduct a similar ex-
periment with a more balanced dataset.
</bodyText>
<subsectionHeader confidence="0.998585">
6.2 Joining Terms
</subsectionHeader>
<bodyText confidence="0.999934228571429">
The difference in accuracy achieved by the two
sets of joining terms is quite small, although for
two of the algorithms the less frequent terms did
achieve slightly better results. The difficulty is that
the task of deducing a semantic relation from a
paraphrase such as &amp;quot;storm in the desert&amp;quot; requires
many different types of information. It requires
knowledge about the preposition &amp;quot;in&amp;quot;; i.e. that it
indicates a location. It requires knowledge about
the noun &amp;quot;desert&amp;quot;, i.e. that it is a location in space
rather than time, and it requires the knowledge that
a &amp;quot;storm&amp;quot; may refer both to an event in time and an
entity in space. It may be that a combination of
semantic information from an ontology and statis-
tical information about paraphrases could be used
together to achieve better performance on this task.
Another interesting avenue for future work in
this area is investigation into exactly how &amp;quot;joining
terms&amp;quot; relate to semantic relations. Given Zipf�s
observation that high frequency words are more
ambiguous than low frequency words, it is possible
that there is a relationship between the frequency
of the preposition in a paraphrase such as &amp;quot;storm
in the desert&amp;quot; and the ease of understanding that
phrase. For example, the preposition &apos;of&apos; is very
frequent and could be interpreted in many ways.
Therefore, the `of&apos; may be used in phrases where
the semantic relation can be easily deduced from
the nominals in the phrase alone. Less common
(and therefore more informative) prepositions such
as `after&apos; or `because&apos; may be used more often in
phrases where the nominals alone do not contain
enough information to deduce the relation, or the
relation intended is not the most obvious one given
the two nouns.
</bodyText>
<sectionHeader confidence="0.963734" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.99991652173913">
Marti A. Hearst. 1992. Automatic Acquisition of Hypo-
nyms from Large Text Corpora. COLING 92: (2) pp.
539-545, Nantes, France,
Frank Keller and Mirella Lapata. 2003. Using the Web
to Obtain Frequencies for Unseen Bigrams. Compu-
tational Linguistics, 29: pp 459-484.
Mirella Lapata and Frank Keller. 2005. Web-Based
Models for Natural Language Processing. ACM
Transactions on Speech and Language Processing
2:1, pp 1-31.
Mark Lauer. 1995. Designing Statistical Language
Learners: Experiments on Noun Compounds. PhD
thesis, Macquarie University, NSW 2109, Australia.
judith Levi. 1978. The Syntax and Semantics of Com-
plex Nominals, Academic Press, New York, NY.
Dan Moldovan, Adriana Badulescu, Marta Tatu, Daniel
Antohe and Roxana Girju. 2004. Models for the Se-
mantic Classification of Noun Phrases. In Proceed-
ings of the HLTINAACL Workshop on Computational
Lexical Semantics. pp 60-67 Boston , MA.
Preslav Nakov and Marti Hearst. 2006. Using Verbs to
Characterize Noun-Noun Relations. In Proceedings
of AIMSA 2006, pp 233-244, Varne, Bulgaria.
Preslav Nakov and Marti Hearst. 2005. Using the Web
as an Implicit Training Set: Application to Structural
Ambiguity Resolution. In Proceedings of
HLTIEMNLP&apos;0S. pp 835-842, Vancouver, Canada.
Vivi Nastase and Stan Szpakowicz. 2003. Exploring
Noun-Modifier Semantic Relations. In Fifth Interna-
tional Workshop on Computational Semantics, pp
285-301. Tillburg, Netherlands.
Barbara Rosario and Marti A. Hearst. 2001. Classifying
the semantic relations in noun compounds via a do-
main-specific lexical hierarchy. In Proceedings of
EMNLP 2001, pp 82-90, Pittsburgh, PA, USA.
Peter D. Turney. 2001. Mining the web for synonyms:
PM-IR vs LSA on TOEFL. Proceedings of
ECML&apos;01. pp 491-502. Freiburg, Germany.
Peter D. Turney and Michael L. Littman. 2005. Corpus-
based learning of analogies and semantic relations.
Machine Learning, 60(1-3):251-278.
Ian H. Witten and Eibe Frank. 1999. Data Mining:
Practical Machine Learning Tools and Techniques
with Java Implementations. Morgan Kaufmann.
George K. Zipf. 1932. Selected Studies of the Principle
of Relative Frequency in Language. Cambridge, MA.
</reference>
<page confidence="0.997864">
84
</page>
</variant>
</algorithm>
<algorithm name="AAMatching" version="110505">
  <results time="1337375005" date="Sat May 19 05:03:25 SGT 2012">
    <authors>
      <author>
        <fullname source="parscit">Paul Nulty</fullname>
        <institutions>
          <institution>School of Computer Science and Informatics University College Dublin Belfield, Dublin 4, Ireland</institution>
        </institutions>
      </author>
    </authors>
    <institutions>
      <institution>School of Computer Science and Informatics University College Dublin Belfield, Dublin 4, Ireland</institution>
    </institutions>
  </results>
</algorithm>

</algorithms>